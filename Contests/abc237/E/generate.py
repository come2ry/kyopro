#!/usr/bin/env python3
# usage: $ oj generate-input 'python3 generate.py'
# usage: $ oj generate-input --hack-actual=./a.out --hack-expected=./naive 'python3 generate.py'
import random
# union-find (rank)
class UF_tree:
    def __init__(self, n):
        self.root = [-1] * (n + 1)
        self.rank = [0] * (n + 1)

    def find(self, x):
        stack = []
        while self.root[x] >= 0:
            stack.append(x)
            x = self.root[x]
        for i in stack:
            self.root[i] = x
        return x

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return False
        if self.rank[x] < self.rank[y]:
            self.root[y] += self.root[x]
            self.root[x] = y
        else:
            self.root[x] += self.root[y]
            self.root[y] = x
            if self.rank[x] == self.rank[y]:
                self.rank[x] += 1
        return True

    def size(self, x):
        return -self.root[self.find(x)]


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    # N = random.randint(2, 2*10**5)  # TODO: edit here
    N = 10**5  # TODO: edit here
    H = [None for _ in range(N)]
    M = random.randint(N-1, min(2*10**5, N*(N-1)//2))  # TODO: edit here
    U = [None for _ in range(M)]
    V = [None for _ in range(M)]
    for i in range(N):
        H[i] = random.randint(0, 10 ** 8)  # TODO: edit here

    # uf = UF_tree(N+1)
    for i in range(M):
        if i < N-1:
            U[i] = i+1
            V[i] = i+2
        else:
            U[i] = random.randint(1, N)  # TODO: edit here
            V[i] = random.randint(1, N)  # TODO: edit here
            # uf.unite(U[i], V[i])

    print(N, M)
    print(*[H[i] for i in range(N)])
    for i in range(M):
        print(U[i], V[i])

if __name__ == "__main__":
    main()
