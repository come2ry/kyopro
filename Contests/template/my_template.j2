#!/usr/bin/env python3
import bisect
import heapq
import math
import sys
from collection import defaultdict, deque
from functools import singledispatch, update_wrapper
from itertools import (accumulate, groupby, permutations, combinations,
                       combinations_with_replacement, product)
from typing import *
input = sys.stdin.buffer.readline
{% if prediction_success %}
{% if mod or yes_str or no_str %}

{% endif %}
{% if mod %}
MOD = {{ mod }}  # type: int
{% endif %}
{% if yes_str %}
YES = "{{ yes_str }}"  # type: str
{% endif %}
{% if no_str %}
NO = "{{ no_str }}"  # type: str
{% endif %}
{% endif %}


T = TypeVar('T', int, float)
D = TypeVar('D', int, float)


def singledispatchmethod(func):
    dispatcher = singledispatch(func)

    def wrapper(*args, **kw):
        return dispatcher.dispatch(args[1].__class__)(*args, **kw)
    wrapper.register = dispatcher.register
    update_wrapper(wrapper, func)
    return wrapper


class UF_tree:
    def __init__(self, n):
        self.root = [-1] * (n + 1)
        self.rank = [0] * (n + 1)

    def find(self, x):
        stack = []
        while self.root[x] >= 0:
            stack.append(x)
            x = self.root[x]
        for i in stack:
            self.root[i] = x
        return x

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return False
        if self.rank[x] < self.rank[y]:
            self.root[y] += self.root[x]
            self.root[x] = y
        else:
            self.root[x] += self.root[y]
            self.root[y] = x
            if self.rank[x] == self.rank[y]:
                self.rank[x] += 1
        return True

    def size(self, x):
        return -self.root[self.find(x)]


def chmax(a: T, b: T) -> bool:
    if (a < b):
        a = b  # aをbで更新
        return True
    return False


def chmin(a: T, b: T) -> Tuple[T, bool]:
    """
    aよりもbが小さいならばaをbで更新する
    (更新されたならばtrueを返す)
    """
    if (a > b):
        a = b  # aをbで更新
        return (a, True)
    return (a, False)
{% if prediction_success %}


def solve({{ formal_arguments }}):
    return
{% endif %}


def main():
    {% if prediction_success %}
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    {{ input_part }}
    solve({{ actual_arguments }})
    {% else %}
    # Failed to predict input format
    pass
    {% endif %}

if __name__ == '__main__':
    main()
